data

strings "" '' str()
lists [] list()
tuples ()  tuple()
dictionaries {} dict()
sets set()

how to convert a string into list of words
how to join list of words and get a string



0
False
None
empty "" [] () {} set()




/////////////////////////////////////////////////////////////////////////////
>>> dir(gc)
['DEBUG_COLLECTABLE', 'DEBUG_INSTANCES', 'DEBUG_LEAK', 'DEBUG_OBJECTS', 'DEBUG_SAVEALL', 'DEBUG_STATS', 'DEBUG_UNCOLLECTABLE', '__doc__', '__name__', '__package__', 'collect', 'disable', 'enable', 'garbage', 'get_count', 'get_debug', 'get_objects', 'get_referents', 'get_referrers', 'get_threshold', 'is_tracked', 'isenabled', 'set_debug', 'set_threshold']
>>> a=100
>>> gc.get_count(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: get_count() takes no arguments (1 given)
>>> help(gc.getcount)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'getcount'
>>> a.get_count()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'int' object has no attribute 'get_count'
>>> help(gc)

>>> quit()
sessitra@VTA010L:~$ clear

sessitra@VTA010L:~$ python --version
Python 2.7.12
sessitra@VTA010L:~$ python
Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> quit()
sessitra@VTA010L:~$ python
Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> msg = "hi how are you"
>>> type(msg)
<type 'str'>
>>> dir(msg)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help(msg.replace)

>>> help(msg.split)

>>> mg = "hi how are you where are you what are you doing"
>>> msg.split()
['hi', 'how', 'are', 'you']
>>> mg.split()
['hi', 'how', 'are', 'you', 'where', 'are', 'you', 'what', 'are', 'you', 'doing']
>>> mg.split("r")
['hi how a', 'e you whe', 'e a', 'e you what a', 'e you doing']
>>> mg.split("r", 3)
['hi how a', 'e you whe', 'e a', 'e you what are you doing']
>>> for i in "rama":
...     print i
... 
r
a
m
a
>>> range(1,11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> for i in range(1,11):
...     print i
... 
1
2
3
4
5
6
7
8
9
10
>>> mg
'hi how are you where are you what are you doing'
>>> mg[0]
'h'
>>> mg[1]
'i'
>>> mg[-1]
'g'
>>> mg[-2]
'n'
>>> mg[3:7]
'how '
>>> mg[3:7:1]
'how '
>>> mg[3:9:2]
'hwa'
>>> mg[3:7:-1]
''
>>> mg[7:3:-1]
'a wo'
>>> mg[-7:-3:-1]
''
>>> mg[-7:3:-1]
'uoy era tahw uoy era erehw uoy era wo'
>>> mg
'hi how are you where are you what are you doing'
>>> "ram".upper()
'RAM'
>>> help("ram".upper)

>>> dir("ram")
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help("ram".strip)

>>> l = [90, 34, 12, 33]
>>> type(l)
<type 'list'>
>>> dir(l)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> help(l.append)

>>> l.append(100)
>>> l
[90, 34, 12, 33, 100]
>>> l.append(10, 34)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: append() takes exactly one argument (2 given)
>>> l.extend(23)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> for i in "ram":
...     print i
... 
r
a
m
>>> for i in [90, 34, 12]:
...     print i
... 
90
34
12
>>> for i in {"ram":98, "shyam":57}:
...     print i
... 
ram
shyam
>>> for i in {34, 12, 44}:
...     print i
... 
12
34
44
>>> for i in (9, 34):
...     print i
... 
9
34
>>> for i in 1000:
...     print i
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> for i in 12.34:
...     print i
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'float' object is not iterable
>>> for i in True:
...     print i
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'bool' object is not iterable
>>> type(True)
<type 'bool'>
>>> type(False)
<type 'bool'>
>>> type(true)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'true' is not defined
>>> type(marks)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'marks' is not defined
>>> if -43:
...     print "hi"
... else:
...     print "hello"
... 
hi
>>> if None:
...     print "hi"
... else:
...     print "hello"
... 
hello
>>> if []:
...     print "hi"
... else:
...     print "hello"
... 
hello
>>>
